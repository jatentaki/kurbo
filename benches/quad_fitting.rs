//! Benchmark of quadratic curve fitting

#![feature(test)]
extern crate test;
use test::Bencher;
use lazy_static::lazy_static;

use kurbo::{QuadBez, Point, fitting::{ParamCurveFit, Constraint}};

lazy_static! {
    static ref FEW_POINTS: Box<[Point]> = {
        Box::new([
            Point::new(0., 0.),
            Point::new(90., 60.),
            Point::new(30., 10.),
            Point::new(50., 30.),
            Point::new(60., 20.),
            Point::new(80., 15.),
            Point::new(65., 40.)
        ])
    };

    static ref MANY_POINTS: Box<[Point]> = {
        Box::new([
            ( 87.49501008064522 , 325.5924068491033 ).into(),
            ( 87.49501008064522 , 385.117182668522 ).into(),
            ( 111.89046647372533 , 435.7132421150279 ).into(),
            ( 191.7301419419876 , 575.5964652906617 ).into(),
            ( 238.30328596514056 , 629.1687635281386 ).into(),
            ( 304.83634885535906 , 676.7885841836735 ).into(),
            ( 417.94255576873053 , 757.1470315398888 ).into(),
            ( 417.94255576873053 , 757.1470315398888 ).into(),
            ( 517.7421501040583 , 831.5530013141621 ).into(),
            ( 584.2752129942769 , 786.9094194495981 ).into(),
            ( 584.2752129942769 , 786.9094194495981 ).into(),
            ( 708.4702637226849 , 721.4321660482376 ).into(),
            ( 806.0520892950053 , 703.5747333024119 ).into(),
            ( 879.2384584742458 , 766.0757479128016 ).into(),
            ( 879.2384584742458 , 766.0757479128016 ).into(),
            ( 967.9492089945372 , 902.9827322974646 ).into(),
            ( 965.7314402315299 , 894.0540159245517 ).into(),
            ( 939.1182150754425 , 855.3629116419296 ).into(),
            ( 874.8029209482313 , 801.7906134044528 ).into(),
            ( 504.4355375260147 , 763.0995091218306 ).into(),
            ( 83.05947255463064 , 673.8123453927026 ).into(),
            ( 83.05947255463064 , 316.6636904761905 ).into(),
            ( 83.05947255463064 , 295.830018939394 ).into(),
            ( 63.09955368756505 , 120.23193027210891 ).into(),
            ( 63.09955368756505 , 120.23193027210891 ).into(),
            ( 65.31732245057236 , 295.830018939394 ).into(),
            ( 78.62393502861607 , 358.33103354978357 ).into(),
            ( 122.97931028876178 , 498.2142567254175 ).into(),
            ( 120.76154152575447 , 495.2380179344466 ).into(),
            ( 147.3747666818419 , 641.0737186920223 ).into(),
            ( 154.02807297086372 , 650.0024350649352 ).into(),
            ( 191.7301419419876 , 682.7410617656154 ).into(),
            ( 202.818985757024 , 688.6935393475572 ).into(),
            ( 278.22312369927164 , 739.2895987940632 ).into(),
            ( 302.6185800923518 , 739.2895987940632 ).into(),
            ( 315.92519267039546 , 739.2895987940632 ).into(),
            ( 329.23180524843923 , 739.2895987940632 ).into(),
            ( 513.3066125780438 , 757.1470315398888 ).into(),
            ( 519.9599188670657 , 757.1470315398888 ).into(),
            ( 524.3954563930802 , 757.1470315398888 ).into(),
            ( 564.3152941272112 , 736.3133600030923 ).into(),
            ( 577.621906705255 , 736.3133600030923 ).into(),
            ( 593.1462880463062 , 730.3608824211503 ).into(),
            ( 615.323975676379 , 730.3608824211503 ).into(),
            ( 628.6305882544225 , 730.3608824211503 ).into(),
            ( 628.6305882544225 , 730.3608824211503 ).into(),
            ( 1012.3045842546828 , 947.6263141620285 ).into(),
            ( 1012.3045842546828 , 947.6263141620285 ).into(),
            ( 932.4649087864207 , 870.2441055967842 ).into(),
            ( 595.3640568093133 , 864.2916280148423 ).into(),
            ( 595.3640568093133 , 864.2916280148423 ).into(),
            ( 442.3380121618107 , 828.5767625231912 ).into(),
            ( 171.770223074922 , 754.1707927489178 ).into(),
            ( 147.3747666818419 , 453.5706748608535 ).into(),
            ( 189.51237317898028 , 322.6161680581324 ).into(),
            ( 189.51237317898028 , 304.7587353123068 ).into(),
            ( 189.51237317898028 , 292.8537801484231 ).into(),
            ( 165.11691678590017 , 170.8279897186148 ).into(),
            ( 154.02807297086372 , 170.8279897186148 ).into(),
            ( 125.19707905176904 , 132.1368854359926 ).into(),
            ( 111.89046647372533 , 102.37449752628328 ).into(),
            ( 76.40616626560876 , 84.5170647804577 ).into(),
            ( 69.75285997658693 , 84.5170647804577 ).into(),
            ( 56.44624739854322 , 75.58834840754486 ).into(),
            ( 52.01070987252865 , 72.61210961657395 ).into(),
            ( 52.01070987252865 , 72.61210961657395 ).into(),
            ( 185.0768356529657 , 135.11312422696358 ).into(),
            ( 205.03675452003125 , 179.75670609152758 ).into(),
            ( 295.9652738033299 , 495.2380179344466 ).into(),
            ( 209.47229204604582 , 554.7627937538653 ).into(),
            ( 209.47229204604582 , 554.7627937538653 ).into(),
            ( 209.47229204604582 , 563.6915101267781 ).into(),
            ( 282.6586612252862 , 917.8639262523192 ).into(),
            ( 539.9198377341313 , 810.7193297773656 ).into(),
            ( 746.1723326938086 , 807.7430909863947 ).into(),
            ( 928.0293712604062 , 891.0777771335808 ).into(),
            ( 987.9091278616027 , 947.6263141620285 ).into(),
            ( 963.5136714685227 , 923.816403834261 ).into(),
            ( 947.9892901274716 , 911.9114486703774 ).into(),
            ( 877.0206897112384 , 894.0540159245517 ).into(),
            ( 859.2785396071802 , 894.0540159245517 ).into(),
            ( 692.945882381634 , 894.0540159245517 ).into(),
            ( 480.0400811329345 , 920.8401650432901 ).into(),
            ( 238.30328596514056 , 932.745120207174 ).into(),
            ( 211.69006080905314 , 870.2441055967842 ).into(),
            ( 131.85038534079087 , 551.7865549628943 ).into(),
            ( 83.05947255463064 , 123.20816906307982 ).into(),
            ( 83.05947255463064 , 123.20816906307982 ).into(),
            ( 83.05947255463064 , 123.20816906307982 ).into(),
            ( 60.88178492455779 , 87.49330357142861 ).into(),
            ( 29.833022242455797 , 4.158617424242465 ).into(),
            ( 29.833022242455797 , 4.158617424242465 ).into(),
            ( 169.55245431191474 , 149.99431818181824 ).into(),
            ( 158.4636104968783 , 364.2835111317255 ).into(),
            ( 129.6326165777836 , 635.1212411100805 ).into(),
            ( 158.4636104968783 , 673.8123453927026 ).into(),
            ( 158.4636104968783 , 673.8123453927026 ).into(),
            ( 216.1255983350677 , 706.5509720933829 ).into(),
            ( 216.1255983350677 , 709.5272108843538 ).into(),
            ( 216.1255983350677 , 709.5272108843538 ).into(),
        ])
    };
}

#[bench]
fn bench_quad_few_free(b: &mut Bencher) {
    use Constraint::Free;

    let constraints: [Constraint; 3] = [
        Free, Free, Free
    ];

    b.iter(|| QuadBez::fit(test::black_box(&FEW_POINTS), test::black_box(&constraints)))

}

#[bench]
fn bench_quad_few_fixed(b: &mut Bencher) {
    use Constraint::Free;

    let constraints: [Constraint; 3] = [
        Free, Free, Point::new(2., 4.).into()
    ];

    b.iter(|| QuadBez::fit(test::black_box(&FEW_POINTS), test::black_box(&constraints)))
}

#[bench]
fn bench_quad_few_line(b: &mut Bencher) {
    use Constraint::Free;

    let constraints: [Constraint; 3] = [
        Free,
        Free,
        (Point::new(2., 4.), Point::new(3., 3.)).into()
    ];

    b.iter(|| QuadBez::fit(test::black_box(&FEW_POINTS), test::black_box(&constraints)))
}
